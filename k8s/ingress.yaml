apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: securepaste-ingress
  namespace: securepaste
  labels:
    app: securepaste
  annotations:
    # Nginx Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "2m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS headers
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "no-referrer-when-downgrade" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Certificate management (uncomment for cert-manager)
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # cert-manager.io/acme-challenge-type: http01
spec:
  ingressClassName: nginx # Adjust based on your ingress controller
  
  # TLS configuration (uncomment for HTTPS)
  # tls:
  # - hosts:
  #   - securepaste.yourdomain.com
  #   secretName: securepaste-tls
  
  rules:
  - host: localhost  # Replace with your actual domain
    http:
      paths:
      # API endpoints
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: securepaste-service
            port:
              number: 80
      
      # Vaadin resources
      - path: /VAADIN
        pathType: Prefix
        backend:
          service:
            name: securepaste-service
            port:
              number: 80
      
      # Static resources
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: securepaste-service
            port:
              number: 80
      
      # Main application
      - path: /
        pathType: Prefix
        backend:
          service:
            name: securepaste-service
            port:
              number: 80
---
# Alternative: LoadBalancer service for cloud providers
apiVersion: v1
kind: Service
metadata:
  name: securepaste-loadbalancer
  namespace: securepaste
  labels:
    app: securepaste
    component: loadbalancer
  annotations:
    # AWS Load Balancer Controller annotations (if using AWS)
    # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    # service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    
    # GCP Load Balancer annotations (if using GCP)
    # cloud.google.com/load-balancer-type: "External"
    
    # Azure Load Balancer annotations (if using Azure)
    # service.beta.kubernetes.io/azure-load-balancer-resource-group: "your-resource-group"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8080
    protocol: TCP
    name: https
  selector:
    app: securepaste
    component: application
  # Uncomment for specific load balancer IP (if available)
  # loadBalancerIP: 1.2.3.4
---
# Network policy for ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: securepaste-ingress-policy
  namespace: securepaste
spec:
  podSelector:
    matchLabels:
      app: securepaste
      component: application
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx  # Adjust based on your ingress controller namespace
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432