apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: securepaste
type: Opaque
data:
  # Base64 encoded values
  # pastebin / pastebin123
  username: cGFzdGViaW4=
  password: cGFzdGViaW4xMjM=
  database: cGFzdGViaW4=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: securepaste
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard # Adjust based on your cluster
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: securepaste
data:
  init.sql: |
    -- SecurePaste Database Initialization
    CREATE DATABASE pastebin;
    GRANT ALL PRIVILEGES ON DATABASE pastebin TO pastebin;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-config
  namespace: securepaste
data:
  # PostgreSQL connection configuration
  database-host: "postgres"
  database-port: "5432"
  database-name: "pastebin"
  # JDBC URL will be constructed as: jdbc:postgresql://${host}:${port}/${database}
  database-url: "jdbc:postgresql://postgres:5432/pastebin"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: securepaste
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-config
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: securepaste
  labels:
    app: postgres
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres